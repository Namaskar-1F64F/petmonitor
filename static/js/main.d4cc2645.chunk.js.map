{"version":3,"sources":["wyatt.png","components/timer.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Timer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","origin","moment","dummy","startTimer","bind","assertThisInitialized","resetTimer","update","clearInterval","intervalId","setInterval","setState","Math","random","console","log","react_default","a","createElement","onClick","style","flexDirection","paddingLeft","width","height","textAlign","justifyContent","display","alignItems","fontSize","src","wyatt","alt","concat","from","Component","App","timer_Timer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,+QCInBC,cACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CAAEC,OAAQC,MAAUC,MAAO,GACxCV,EAAKW,WAAaX,EAAKW,WAAWC,KAAhBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KAClBA,EAAKc,WAAad,EAAKc,WAAWF,KAAhBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KAClBA,EAAKe,OAASf,EAAKe,OAAOH,KAAZX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KALGA,mFASjBG,KAAKQ,kDAILK,cAAcb,KAAKc,YACnBd,KAAKc,WAAaC,YAAYf,KAAKY,OAAQ,sCAI3CZ,KAAKgB,SAAS,CAAET,MAAOU,KAAKC,gDAG5BlB,KAAKgB,SAAS,CAAEX,OAAQC,yCAMxB,OAFAa,QAAQC,IAAI,UAGVC,EAAAC,EAAAC,cAAA,OAAKC,QAASxB,KAAKW,WAAYc,MAAO,CAAEC,cAAe,SAAUC,YAAa,MAAOC,MAAO,OAAQC,OAAQ,OAAQC,UAAW,SAAUC,eAAgB,SAAUC,QAAS,OAAQC,WAAY,SAAUC,SAAU,QAClNb,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAAEI,OAAQ,SAAWM,IAAKC,IAAOC,IAAI,UACjDhB,EAAAC,EAAAC,cAAA,2BAAAe,OAAuBtC,KAAKI,MAAMC,OAAOkC,KAAKjC,OAA9C,cA/B2BkC,aCUpBC,0LARX,OACEpB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACmB,EAAD,cAJUF,cCQEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5B,EAAAC,EAAAC,cAAC2B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d4cc2645.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/wyatt.f77cee4a.png\";","import React, { Component } from 'react';\nimport moment from 'moment';\nimport wyatt from '../wyatt.png';\n\nexport default class Timer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { origin: moment(), dummy: 1 };\n    this.startTimer = this.startTimer.bind(this);\n    this.resetTimer = this.resetTimer.bind(this);\n    this.update = this.update.bind(this);\n  }\n\n  componentDidMount() {\n    this.startTimer();\n  }\n\n  startTimer() {\n    clearInterval(this.intervalId);\n    this.intervalId = setInterval(this.update, 1000);\n  }\n\n  update() {\n    this.setState({ dummy: Math.random() });\n  }\n  resetTimer() {\n    this.setState({ origin: moment() });\n  }\n\n  render() {\n    console.log('render');\n\n    return (\n      <div onClick={this.resetTimer} style={{ flexDirection: 'column', paddingLeft: '2vw', width: '98vw', height: '98vh', textAlign: 'center', justifyContent: 'center', display: 'flex', alignItems: 'center', fontSize: '4vh' }} >\n        <img style={{ height: '200px' }} src={wyatt} alt='wyatt'></img>\n        <h1 >{`I was let out ${this.state.origin.from(moment())}.`}</h1>\n      </ div>\n    )\n  }\n}","import React, { Component } from 'react';\nimport Timer from './components/timer';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Timer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}